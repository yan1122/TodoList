{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onClickAddItem","trimmedTitle","trim","addItem","errorMessage","className","value","onChange","e","currentTarget","onKeyPress","key","onClick","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","TodoList","tasks","map","t","isDone","type","changeTaskStatus","id","checked","todoListID","changeTaskTitle","removeTask","removeTodoList","addTask","filter","changeFilter","App","todoList_Id1","v1","todoList_Id2","todoLists","setTodoLists","setTasks","getTasksForTodolist","todoList","todoListsComponents","tl","NewTodoListId","taskID","newTask","newIsDone","newTitle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.abf4e8ad.chunk.js","sourcesContent":["import React, { useState, KeyboardEvent, ChangeEvent } from 'react';\r\n\r\ntype AddItemFormPropsType =  {\r\naddItem : (title:string) => void\r\n}\r\n\r\nconst AddItemForm = (props:AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState('')\r\n    const [error,setError] = useState<boolean>(false)\r\n\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onClickAddItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n            setTitle('')\r\n            setError(false)\r\n        }\r\n        else{setError(true)}\r\n    }\r\n\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onClickAddItem()\r\n        }\r\n    }\r\n\r\n    const errorMessage = error?<div className='error-message'>Title is requared</div> :null\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                className={error ? 'error' : ''}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddItem} />\r\n            <button onClick={onClickAddItem}>+</button>\r\n            {errorMessage}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddItemForm","import React, { useState, KeyboardEvent, ChangeEvent } from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle : (title:string) => void\r\n}\r\n\r\nconst EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode,setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState(props.title)\r\n    const onEditMode = () =>{\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n        ? <input value={title} onChange={onChangeTitle} autoFocus onBlur={offEditMode} /> \r\n        : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n}\r\n\r\nexport default EditableSpan","import React, { useState, KeyboardEvent, ChangeEvent } from 'react';\r\nimport AddItemForm from './AddItemForm';\r\nimport { filtersValueType, TaskType } from './App';\r\nimport EditableSpan from './EditableSpan';\r\n\r\ntype TodoListPropsType = {\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: filtersValueType\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeFilter: (value: filtersValueType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, newIsDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle:(taskID: string, newTitle:string , todoListID: string) => void\r\n}\r\n\r\n\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n    \r\n    const tasks = props.tasks.map((t: TaskType) => {\r\n        const removeTask = () => props.removeTask(t.id, props.todoListID)\r\n        const changeTaskTitle = (title:string) =>{\r\n            props.changeTaskTitle(t.id,title,props.todoListID)\r\n        }\r\n        return (\r\n            <li className={t.isDone ? 'is-done' : ''}>\r\n                <input type=\"checkbox\" onChange={(e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID)} checked={t.isDone} />\r\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle} />\r\n                <button onClick={removeTask}>X</button>\r\n            </li>\r\n        )\r\n    })\r\n\r\n\r\n    const onClickAllButton = () => props.changeFilter(\"all\", props.todoListID)\r\n    const onClickActiveButton = () => props.changeFilter(\"active\", props.todoListID)\r\n    const onClickCompletedButton = () => props.changeFilter(\"completed\", props.todoListID)\r\n    const addTask = (title: string) => props.addTask(title, props.todoListID)\r\n    const onClickRemoveTodolist = () => props.removeTodoList(props.todoListID)\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"TodoList\">\r\n            <div>\r\n                <h3>{props.title}<button onClick={onClickRemoveTodolist}>X</button></h3>\r\n\r\n                <div>\r\n                    <AddItemForm addItem={addTask} />\r\n                </div>\r\n                <ul>\r\n                    {tasks}\r\n                </ul>\r\n                <div>\r\n                    <button className={props.filter === 'all' ? 'active-filter' : ''} onClick={onClickAllButton}>All</button>\r\n                    <button className={props.filter === 'active' ? 'active-filter' : ''} onClick={onClickActiveButton}>Active</button>\r\n                    <button className={props.filter === 'completed' ? 'active-filter' : ''} onClick={onClickCompletedButton}>Completed</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList","import React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport AddItemForm from './AddItemForm';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\n\r\nexport type TaskType = {\r\n    title: string\r\n    id: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type filtersValueType = \"all\" | \"active\" | \"completed\"\r\n\r\n\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: filtersValueType\r\n}\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todoList_Id1 = v1()\r\n    const todoList_Id2 = v1()\r\n\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodolistType>>([\r\n        { id: todoList_Id1, title: 'What to learn', filter: 'all' },\r\n        { id: todoList_Id2, title: 'What to buy', filter: 'all' },\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoList_Id1]: [\r\n            { id: v1(), title: \"html\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true },\r\n            { id: v1(), title: \"React\", isDone: false }\r\n        ],\r\n        [todoList_Id2]: [\r\n            { id: v1(), title: \"Bread\", isDone: true },\r\n            { id: v1(), title: \"Beer\", isDone: true },\r\n            { id: v1(), title: \"Fish\", isDone: false }\r\n        ]\r\n    })\r\n\r\n    function getTasksForTodolist(todoList: TodolistType) {\r\n        switch (todoList.filter) {\r\n            case \"active\":\r\n                return tasks[todoList.id].filter(t => !t.isDone)\r\n            case \"completed\":\r\n                return tasks[todoList.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[todoList.id]\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n\r\n        return (\r\n            <TodoList\r\n                key={tl.id}\r\n                todoListID={tl.id}\r\n                changeTaskStatus={changeTaskStatus}\r\n                filter={tl.filter}\r\n                addTask={addTask}\r\n                changeFilter={changeFilter}\r\n                title={tl.title}\r\n                tasks={getTasksForTodolist(tl)}\r\n                removeTask={removeTask}\r\n                removeTodoList={removeTodoList}\r\n                changeTaskTitle={changeTaskTitle}\r\n                />\r\n\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList} />\r\n            {todoListsComponents}\r\n        </div>\r\n    );\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        setTasks({ ...tasks })\r\n    }\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title,\r\n            isDone: false\r\n        }\r\n        setTasks({ ...tasks, [todoListID]: [newTask, ...tasks[todoListID]] })\r\n    }\r\n    function changeTaskStatus(taskID: string, newIsDone: boolean, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? { ...t, isDone: newIsDone } : t)\r\n        setTasks({ ...tasks })\r\n    }\r\n    function changeFilter(value: filtersValueType, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? { ...tl, filter: value } : tl)\r\n        )\r\n    }\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n    function addTodoList(title: string) {\r\n    const NewTodoListId = v1()\r\n    const NewTodoList:TodolistType = {\r\n        id:NewTodoListId,\r\n        title,\r\n        filter:'all'\r\n    }\r\n    setTodoLists([NewTodoList,...todoLists])\r\n        setTasks({...tasks,[NewTodoListId]:[]})\r\n    }\r\n    function changeTaskTitle(taskID: string, newTitle:string , todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? { ...t, title:newTitle} : t)\r\n        setTasks({ ...tasks })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}