{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onClickAddItem","trimmedTitle","trim","addItem","errorMessage","className","TextField","helperText","variant","label","value","onChange","e","currentTarget","onKeyPress","key","IconButton","onClick","ControlPoint","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","TodoList","tasks","map","t","isDone","Checkbox","changeTaskStatus","id","checked","todoListID","changeTaskTitle","removeTask","Delete","changeTodoListTitle","removeTodoList","addTask","Button","color","filter","changeFilter","App","todoList_Id1","v1","todoList_Id2","todoLists","setTodoLists","setTasks","getTasksForTodolist","todoList","todoListsComponents","tl","Grid","item","Paper","style","padding","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","NewTodoListId","spacing","taskID","newTask","newIsDone","newTitle","td","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cbc4e4e5.chunk.js","sourcesContent":["import React, { useState, KeyboardEvent, ChangeEvent } from 'react';\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType =  {\r\naddItem : (title:string) => void\r\n}\r\n\r\nconst AddItemForm = (props:AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState('')\r\n    const [error,setError] = useState<boolean>(false)\r\n\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onClickAddItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n            setTitle('')\r\n            setError(false)\r\n        }\r\n        else{setError(true)}\r\n    }\r\n\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onClickAddItem()\r\n        }\r\n    }\r\n\r\n    const errorMessage = error?<div className='error-message'>Title is requared</div> :null\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n               error={!!error}\r\n               helperText={error}\r\n               variant={\"outlined\"}\r\n               label={\"Type value\"}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddItem} />\r\n\r\n            <IconButton onClick={onClickAddItem}><ControlPoint /></IconButton>\r\n            {errorMessage}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddItemForm","import React, { useState, KeyboardEvent, ChangeEvent } from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle : (title:string) => void\r\n}\r\n\r\nconst EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode,setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState(props.title)\r\n    const onEditMode = () =>{\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n        ? <TextField value={title} onChange={onChangeTitle} autoFocus onBlur={offEditMode} />\r\n        : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n}\r\n\r\nexport default EditableSpan","import React, { useState, KeyboardEvent, ChangeEvent } from 'react';\r\nimport AddItemForm from './AddItemForm';\r\nimport { filtersValueType, TaskType } from './App';\r\nimport EditableSpan from './EditableSpan';\r\nimport {Button, Checkbox, Icon, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TodoListPropsType = {\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: filtersValueType\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeFilter: (value: filtersValueType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, newIsDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle:(taskID: string, newTitle:string , todoListID: string) => void\r\n    changeTodoListTitle:(todoListID:string, newTitle:string ) => void\r\n}\r\n\r\n\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n    \r\n    const tasks = props.tasks.map((t: TaskType) => {\r\n        const removeTask = () => props.removeTask(t.id, props.todoListID)\r\n        const changeTaskTitle = (title:string) =>{\r\n            props.changeTaskTitle(t.id,title,props.todoListID)\r\n        }\r\n        return (\r\n            <div className={t.isDone ? 'is-done' : ''}>\r\n                <Checkbox onChange={(e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID)} checked={t.isDone} />\r\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle} />\r\n                <IconButton onClick={removeTask}> <Delete/> </IconButton>\r\n            </div>\r\n        )\r\n    })\r\n\r\n\r\n    const onClickAllButton = () => props.changeFilter(\"all\", props.todoListID)\r\n    const onClickActiveButton = () => props.changeFilter(\"active\", props.todoListID)\r\n    const onClickCompletedButton = () => props.changeFilter(\"completed\", props.todoListID)\r\n    const addTask = (title: string) => props.addTask(title, props.todoListID)\r\n    const onClickRemoveTodolist = () => props.removeTodoList(props.todoListID)\r\n    const changeTodoListTitle =(title:string) => props.changeTodoListTitle(props.todoListID,title)\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"TodoList\">\r\n            <div>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle} />\r\n                    <IconButton onClick={onClickRemoveTodolist}> <Delete/> </IconButton>\r\n\r\n\r\n                <div>\r\n                    <AddItemForm addItem={addTask} />\r\n                </div>\r\n                <div>\r\n                    {tasks}\r\n                </div>\r\n                <div>\r\n                    <Button color={props.filter === 'all' ? \"primary\" : 'default'} variant={props.filter === 'all' ? \"contained\" : 'outlined'} onClick={onClickAllButton}>All</Button>\r\n                    <Button color={props.filter === 'active' ? \"primary\" : 'default'} variant={props.filter === 'active' ? \"contained\" : 'outlined'}  onClick={onClickActiveButton}>Active</Button>\r\n                    <Button color={props.filter === 'completed' ? \"primary\" : 'default'}  variant={props.filter === 'completed' ? \"contained\" : 'outlined'} onClick={onClickCompletedButton}>Completed</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList","import React, {useState} from 'react';\r\nimport {v1} from 'uuid';\r\nimport AddItemForm from './AddItemForm';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    title: string\r\n    id: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type filtersValueType = \"all\" | \"active\" | \"completed\"\r\n\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: filtersValueType\r\n}\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todoList_Id1 = v1()\r\n    const todoList_Id2 = v1()\r\n\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodolistType>>([\r\n        {id: todoList_Id1, title: 'What to learn', filter: 'all'},\r\n        {id: todoList_Id2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoList_Id1]: [\r\n            {id: v1(), title: \"html\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false}\r\n        ],\r\n        [todoList_Id2]: [\r\n            {id: v1(), title: \"Bread\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Fish\", isDone: false}\r\n        ]\r\n    })\r\n\r\n    function getTasksForTodolist(todoList: TodolistType) {\r\n        switch (todoList.filter) {\r\n            case \"active\":\r\n                return tasks[todoList.id].filter(t => !t.isDone)\r\n            case \"completed\":\r\n                return tasks[todoList.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[todoList.id]\r\n        }\r\n    }\r\n\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n\r\n        return (\r\n            <Grid item>\r\n                <Paper style={ {padding:\"10px\"} }>\r\n                <TodoList\r\n                    key={tl.id}\r\n                    todoListID={tl.id}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    filter={tl.filter}\r\n                    addTask={addTask}\r\n                    changeFilter={changeFilter}\r\n                    title={tl.title}\r\n                    tasks={getTasksForTodolist(tl)}\r\n                    removeTask={removeTask}\r\n                    removeTodoList={removeTodoList}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n                </Paper>\r\n            </Grid>\r\n\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar>\r\n                    <IconButton edge={\"start\"} color={\"inherit\"} aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={\"h6\"}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color={\"inherit\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={ {padding:\"20px\"} } >\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title,\r\n            isDone: false\r\n        }\r\n        setTasks({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]})\r\n    }\r\n\r\n    function changeTaskStatus(taskID: string, newIsDone: boolean, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, isDone: newIsDone} : t)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTaskTitle(taskID: string, newTitle: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, title: newTitle} : t)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTodoListTitle(todoListID:string, newTitle:string ){\r\n        todoLists = todoLists.map(td => td.id === todoListID ? {...td,title:newTitle} : td)\r\n        setTodoLists(todoLists)\r\n    }\r\n\r\n    function changeFilter(value: filtersValueType, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter: value} : tl)\r\n        )\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        const NewTodoListId = v1()\r\n        const NewTodoList: TodolistType = {\r\n            id: NewTodoListId,\r\n            title,\r\n            filter: 'all'\r\n        }\r\n        setTodoLists([NewTodoList, ...todoLists])\r\n        setTasks({...tasks, [NewTodoListId]: []})\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}